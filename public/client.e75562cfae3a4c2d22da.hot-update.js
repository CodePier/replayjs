webpackHotUpdate("client",{

/***/ "./resources/js/client/tree-mirror.js":
/*!********************************************!*\
  !*** ./resources/js/client/tree-mirror.js ***!
  \********************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var core_js_modules_es6_array_map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.array.map */ \"./node_modules/core-js/modules/es6.array.map.js\");\n/* harmony import */ var core_js_modules_es6_array_map__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_map__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_es6_array_iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es6.array.iterator */ \"./node_modules/core-js/modules/es6.array.iterator.js\");\n/* harmony import */ var core_js_modules_es6_array_iterator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_iterator__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es6.function.name */ \"./node_modules/core-js/modules/es6.function.name.js\");\n/* harmony import */ var core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _babel_runtime_corejs2_core_js_object_keys__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime-corejs2/core-js/object/keys */ \"./node_modules/@babel/runtime-corejs2/core-js/object/keys.js\");\n/* harmony import */ var _babel_runtime_corejs2_core_js_object_keys__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_corejs2_core_js_object_keys__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/web.dom.iterable */ \"./node_modules/core-js/modules/web.dom.iterable.js\");\n/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var core_js_modules_es6_array_for_each__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es6.array.for-each */ \"./node_modules/core-js/modules/es6.array.for-each.js\");\n/* harmony import */ var core_js_modules_es6_array_for_each__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_for_each__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _mutation_summary__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./mutation-summary */ \"./resources/js/client/mutation-summary.js\");\n\n\n\n\n\n\n\n\nvar TreeMirror = function () {\n  function TreeMirror(root, delegate) {\n    this.root = root;\n    this.delegate = delegate;\n    this.idMap = {};\n  }\n\n  TreeMirror.prototype.initialize = function (rootId, children) {\n    this.idMap[rootId] = this.root;\n\n    for (var i = 0; i < children.length; i++) {\n      this.deserializeNode(children[i], this.root);\n    }\n  };\n\n  TreeMirror.prototype.applyChanged = function (removed, addedOrMoved, attributes, text) {\n    var _this = this; // NOTE: Applying the changes can result in an attempting to add a child\n    // to a parent which is presently an ancestor of the parent. This can occur\n    // based on random ordering of moves. The way we handle this is to first\n    // remove all changed nodes from their parents, then apply.\n\n\n    addedOrMoved.forEach(function (data) {\n      var node = _this.deserializeNode(data);\n\n      var parent = _this.deserializeNode(data.parentNode);\n\n      var previous = _this.deserializeNode(data.previousSibling);\n\n      if (node.contains(parent) === false && node instanceof HTMLElement === true && parent instanceof HTMLElement === true && node.parentNode) {\n        node.parentNode.removeChild(node);\n      }\n    });\n    removed.forEach(function (data) {\n      var node = _this.deserializeNode(data);\n\n      if (node.parentNode) node.parentNode.removeChild(node);\n    });\n    addedOrMoved.forEach(function (data) {\n      var node = _this.deserializeNode(data);\n\n      var parent = _this.deserializeNode(data.parentNode);\n\n      var previous = _this.deserializeNode(data.previousSibling);\n\n      try {\n        // The node might be a document element which has a parent reference\n        // to the last node in the idMap. In this case we will see the error\n        // above (see NOTE)\n        if (!node.contains(parent) && node instanceof HTMLElement === true && // 21.3.2017: In some cases the idMap reports that the parent of the element is for example\n        // html comment. In this case we obviously don't want to apply the move so we check\n        // here that it is\n        parent instanceof HTMLElement === true) {\n          parent.insertBefore(node, previous ? previous.nextSibling : parent.firstChild);\n        } // 21.3.2017: Handle <html> elements as special case in case we the tree is trying\n        // to remove it, we add back to root\n        else if (node instanceof HTMLElement && node.nodeName === \"HTML\" && _this.root instanceof HTMLDocument && _this.root.contains(node) === false) {\n            _this.root.appendChild(node);\n          }\n      } catch (e) {\n        // In some cases it seems that MutationSummary determines the parent\n        // of a node incorrectly. Example: <meta> element has parent #document\n        // and previousSibling is <html>. When this occurs we receive an error\n        // that says 'Only one element is allowed on #document'\n        // We probably want to append the node to the sibling\n        if (parent instanceof HTMLDocument && previous instanceof HTMLElement && parent.contains(previous)) {\n          if (previous.firstChild) previous.insertBefore(node, previous.firstChild);else previous.appendChild(node);\n        } // Might still fail but we should call applyChanged inside try...catch\n        // anyway\n\n\n        if (_this.debug) {\n          console.log(e);\n        }\n      }\n    });\n    attributes.forEach(function (data) {\n      var node = _this.deserializeNode(data);\n\n      _babel_runtime_corejs2_core_js_object_keys__WEBPACK_IMPORTED_MODULE_3___default()(data.attributes).forEach(function (attrName) {\n        var newVal = data.attributes[attrName];\n\n        if (newVal === null) {\n          node.removeAttribute(attrName);\n        } else {\n          try {\n            if (!_this.delegate || !_this.delegate.setAttribute || !_this.delegate.setAttribute(node, attrName, newVal)) {\n              node.setAttribute(attrName, newVal);\n            }\n          } catch (e) {// Debug node.setAttribute here\n          }\n        }\n      });\n    });\n    text.forEach(function (data) {\n      var node = _this.deserializeNode(data);\n\n      node.textContent = data.textContent;\n    });\n    removed.forEach(function (node) {\n      delete _this.idMap[node.id];\n    });\n  };\n\n  TreeMirror.prototype.deserializeNode = function (nodeData, parent) {\n    var _this = this;\n\n    if (nodeData === null) return null;\n    var node = this.idMap[nodeData.id];\n    if (node) return node;\n    var doc = this.root.ownerDocument;\n    if (doc === null) doc = this.root;\n    console.info(nodeData.nodeType);\n\n    switch (nodeData.nodeType) {\n      case Node.COMMENT_NODE:\n        node = doc.createComment(nodeData.textContent);\n        break;\n\n      case Node.TEXT_NODE:\n        node = doc.createTextNode(nodeData.textContent);\n        break;\n\n      case Node.DOCUMENT_TYPE_NODE:\n        node = doc.implementation.createDocumentType(nodeData.name, nodeData.publicId, nodeData.systemId);\n        break;\n\n      case Node.ELEMENT_NODE:\n        if (this.delegate && this.delegate.createElement) node = this.delegate.createElement(nodeData.tagName);\n        if (!node) node = doc.createElement(nodeData.tagName);\n\n        _babel_runtime_corejs2_core_js_object_keys__WEBPACK_IMPORTED_MODULE_3___default()(nodeData.attributes).forEach(function (name) {\n          try {\n            if (!_this.delegate || !_this.delegate.setAttribute || !_this.delegate.setAttribute(node, name, nodeData.attributes[name])) {\n              node.setAttribute(name, nodeData.attributes[name]);\n            }\n          } catch (e) {// Debug here if needed\n          }\n        });\n\n        break;\n    }\n\n    if (!node) throw \"ouch\";\n    this.idMap[nodeData.id] = node;\n    if (parent) parent.appendChild(node);\n\n    if (nodeData.childNodes) {\n      for (var i = 0; i < nodeData.childNodes.length; i++) {\n        this.deserializeNode(nodeData.childNodes[i], node);\n      }\n    }\n\n    return node;\n  };\n\n  return TreeMirror;\n}();\n\nvar TreeMirrorClient = function () {\n  function TreeMirrorClient(target, mirror, testingQueries) {\n    var _this = this;\n\n    this.target = target;\n    this.mirror = mirror;\n    this.nextId = 1;\n    this.knownNodes = new _mutation_summary__WEBPACK_IMPORTED_MODULE_6__[\"MutationSummary\"].NodeMap();\n\n    if (typeof this.mirror == \"undefined\") {\n      this.mirror = _this.getDefaultMirror();\n    }\n\n    var rootId = this.serializeNode(target).id;\n    var children = [];\n\n    for (var child = target.firstChild; child; child = child.nextSibling) {\n      children.push(this.serializeNode(child, true));\n    }\n\n    this.mirror.initialize(rootId, children);\n    var self = this;\n    var queries = [{\n      all: true\n    }];\n    if (testingQueries) queries = queries.concat(testingQueries);\n    var MutationObserverCtor;\n\n    try {\n      if (typeof WebKitMutationObserver !== 'undefined') MutationObserverCtor = WebKitMutationObserver;else MutationObserverCtor = MutationObserver;\n    } catch (e) {\n      MutationObserverCtor = undefined;\n    }\n\n    ;\n\n    if (MutationObserverCtor !== undefined) {\n      this.mutationSummary = new _mutation_summary__WEBPACK_IMPORTED_MODULE_6__[\"MutationSummary\"]({\n        rootNode: target,\n        callback: function callback(summaries) {\n          _this.applyChanged(summaries);\n        },\n        queries: queries\n      });\n    }\n  }\n\n  TreeMirrorClient.prototype.getDefaultMirror = function () {\n    return {\n      initialize: function initialize(rootId, children) {\n        return;\n      },\n      applyChanged: function applyChanged(removed, addedOrMoved, attributes, text) {\n        return;\n      }\n    };\n  };\n\n  TreeMirrorClient.prototype.disconnect = function () {\n    if (this.mutationSummary) {\n      this.mutationSummary.disconnect();\n      this.mutationSummary = undefined;\n    }\n  };\n\n  TreeMirrorClient.prototype.rememberNode = function (node) {\n    var id = this.nextId++;\n    this.knownNodes.set(node, id);\n    return id;\n  };\n\n  TreeMirrorClient.prototype.forgetNode = function (node) {\n    this.knownNodes.delete(node);\n  };\n\n  TreeMirrorClient.prototype.serializeNode = function (node, recursive) {\n    if (node === null) return null;\n    var id = this.knownNodes.get(node);\n\n    if (id !== undefined) {\n      return {\n        id: id\n      };\n    }\n\n    var data = {\n      nodeType: node.nodeType,\n      id: this.rememberNode(node)\n    };\n\n    switch (data.nodeType) {\n      case Node.DOCUMENT_TYPE_NODE:\n        var docType = node;\n        data.name = docType.name;\n        data.publicId = docType.publicId;\n        data.systemId = docType.systemId;\n        break;\n\n      case Node.COMMENT_NODE:\n      case Node.TEXT_NODE:\n        data.textContent = node.textContent;\n        break;\n\n      case Node.ELEMENT_NODE:\n        var elm = node;\n        data.tagName = elm.tagName;\n        data.attributes = {};\n\n        for (var i = 0; i < elm.attributes.length; i++) {\n          var attr = elm.attributes[i];\n          data.attributes[attr.name] = attr.value;\n        }\n\n        if (recursive && elm.childNodes.length) {\n          data.childNodes = [];\n\n          for (var child = elm.firstChild; child; child = child.nextSibling) {\n            data.childNodes.push(this.serializeNode(child, true));\n          }\n        }\n\n        break;\n    }\n\n    return data;\n  };\n\n  TreeMirrorClient.prototype.serializeAddedAndMoved = function (added, reparented, reordered) {\n    var _this = this;\n\n    var all = added.concat(reparented).concat(reordered);\n    var parentMap = new _mutation_summary__WEBPACK_IMPORTED_MODULE_6__[\"MutationSummary\"].NodeMap();\n    all.forEach(function (node) {\n      var parent = node.parentNode;\n      var children = parentMap.get(parent);\n\n      if (!children) {\n        children = new _mutation_summary__WEBPACK_IMPORTED_MODULE_6__[\"MutationSummary\"].NodeMap();\n        parentMap.set(parent, children);\n      }\n\n      children.set(node, true);\n    });\n    var moved = [];\n    parentMap.keys().forEach(function (parent) {\n      var children = parentMap.get(parent);\n      var keys = children.keys();\n\n      while (keys.length) {\n        var node = _keys[0];\n\n        while (node.previousSibling && children.has(node.previousSibling)) {\n          node = node.previousSibling;\n        }\n\n        while (node && children.has(node)) {\n          var data = _this.serializeNode(node);\n\n          data.previousSibling = _this.serializeNode(node.previousSibling);\n          data.parentNode = _this.serializeNode(node.parentNode);\n          moved.push(data);\n          children.delete(node);\n          node = node.nextSibling;\n        }\n\n        var _keys = children.keys();\n      }\n    });\n    return moved;\n  };\n\n  TreeMirrorClient.prototype.serializeAttributeChanges = function (attributeChanged) {\n    var _this = this;\n\n    var map = new _mutation_summary__WEBPACK_IMPORTED_MODULE_6__[\"MutationSummary\"].NodeMap();\n\n    _babel_runtime_corejs2_core_js_object_keys__WEBPACK_IMPORTED_MODULE_3___default()(attributeChanged).forEach(function (attrName) {\n      attributeChanged[attrName].forEach(function (element) {\n        var record = map.get(element);\n\n        if (!record) {\n          record = _this.serializeNode(element);\n          record.attributes = {};\n          map.set(element, record);\n        }\n\n        record.attributes[attrName] = element.getAttribute(attrName);\n      });\n    });\n\n    return map.keys().map(function (node) {\n      return map.get(node);\n    });\n  };\n\n  TreeMirrorClient.prototype.applyChanged = function (summaries) {\n    var _this = this;\n\n    var summary = summaries[0];\n    var removed = summary.removed.map(function (node) {\n      return _this.serializeNode(node);\n    });\n    var moved = this.serializeAddedAndMoved(summary.added, summary.reparented, summary.reordered);\n    var attributes = this.serializeAttributeChanges(summary.attributeChanged);\n    var text = summary.characterDataChanged.map(function (node) {\n      var data = _this.serializeNode(node);\n\n      data.textContent = node.textContent;\n      return data;\n    });\n    this.mirror.applyChanged(removed, moved, attributes, text);\n    summary.removed.forEach(function (node) {\n      _this.forgetNode(node);\n    });\n  };\n\n  return TreeMirrorClient;\n}();\n\nconsole.info(TreeMirrorClient);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/client/tree-mirror.js\n");

/***/ })

})